{
  "stats": {
    "suites": 2,
    "tests": 3,
    "passes": 3,
    "pending": 0,
    "failures": 0,
    "start": "2025-09-09T18:05:53.213Z",
    "end": "2025-09-09T18:05:53.290Z",
    "duration": 77,
    "testsRegistered": 3,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "926b10a7-52be-4457-9ab5-f096d0bd95aa",
      "title": "",
      "fullFile": "C:\\Users\\AnaLígiaBragagnolo\\Ana-Pos\\pgats-2025-02-base\\test\\rest\\controller\\checkoutController.test.js",
      "file": "\\test\\rest\\controller\\checkoutController.test.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "2745a741-1ebf-4392-ab8e-0bf365dc40de",
          "title": "Checkout Controller",
          "fullFile": "C:\\Users\\AnaLígiaBragagnolo\\Ana-Pos\\pgats-2025-02-base\\test\\rest\\controller\\checkoutController.test.js",
          "file": "\\test\\rest\\controller\\checkoutController.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "4b029f60-ba64-49ce-a62b-cb76f73eb82b",
              "title": "POST /checkout",
              "fullFile": "C:\\Users\\AnaLígiaBragagnolo\\Ana-Pos\\pgats-2025-02-base\\test\\rest\\controller\\checkoutController.test.js",
              "file": "\\test\\rest\\controller\\checkoutController.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"POST /checkout\"",
                  "fullTitle": "Checkout Controller POST /checkout \"before each\" hook in \"POST /checkout\"",
                  "timedOut": false,
                  "duration": 6,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const respostaLogin = await request(app)\n    .post('/api/users/login')\n    .send({\n        email: 'bob@email.com',\n        password: '123456'\n    });\ntoken = respostaLogin.body.token;",
                  "err": {},
                  "uuid": "b165b18b-eeed-4237-b660-768c4ba98e93",
                  "parentUUID": "4b029f60-ba64-49ce-a62b-cb76f73eb82b",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"POST /checkout\"",
                  "fullTitle": "Checkout Controller POST /checkout \"after each\" hook in \"POST /checkout\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.restore();",
                  "err": {},
                  "uuid": "b34b1e22-767d-417d-999d-6042641c61a3",
                  "parentUUID": "4b029f60-ba64-49ce-a62b-cb76f73eb82b",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "Deve realizar checkout com sucesso quando informo produto e quantidade",
                  "fullTitle": "Checkout Controller POST /checkout Deve realizar checkout com sucesso quando informo produto e quantidade",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request(app)\n    .post('/api/checkout')\n    .set('Authorization', `Bearer ${token}`)\n    .send(\n        {items: [\n            {\n            productId: 2,\n            quantity: 1\n            }\n        ],\n        freight: 0,\n        paymentMethod: \"boleto\",\n        cardData: {\n            number: \"string\",\n            name: \"string\",\n            expiry: \"string\",\n            cvv: \"string\"\n        }\n    });\n\nexpect(resposta.status).to.equal(200)",
                  "err": {},
                  "uuid": "e581b938-b5bf-4b4c-9364-e1556a94ccbd",
                  "parentUUID": "4b029f60-ba64-49ce-a62b-cb76f73eb82b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Devo receber erro de produto não encontrado quando informo ID não cadastrado",
                  "fullTitle": "Checkout Controller POST /checkout Devo receber erro de produto não encontrado quando informo ID não cadastrado",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const checkoutServiceMock = sinon.stub(checkoutService, 'checkout');\ncheckoutServiceMock.throws({ status: 400, message: 'Produto não encontrado' });\n           \nconst resposta = await request(app)\n    .post('/api/checkout')\n    .set('Authorization', `Bearer ${token}`)\n    .send(\n        {items: [\n            {\n            productId: 0,\n            quantity: 1\n            }\n        ],\n        freight: 0,\n        paymentMethod: \"boleto\",\n        cardData: {\n            number: \"string\",\n            name: \"string\",\n            expiry: \"string\",\n            cvv: \"string\"\n        }\n    });\n\nexpect(resposta.status).to.equal(400);\nexpect(resposta.body).to.have.property('error', 'Produto não encontrado')",
                  "err": {},
                  "uuid": "9d5fc523-21b8-40e6-8b36-8789c43fdcb7",
                  "parentUUID": "4b029f60-ba64-49ce-a62b-cb76f73eb82b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando o token não é informado",
                  "fullTitle": "Checkout Controller POST /checkout Deve retornar erro quando o token não é informado",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const checkoutServiceMock = sinon.stub(checkoutService, 'checkout');\n            checkoutServiceMock.throws({ status: 401, message: 'Token inválido' });\n            const resposta = await request(app)\n                .post('/api/checkout')\n                .send(\n                    {items: [\n                        {\n                        productId: 0,\n                        quantity: 1\n                        }\n                    ],\n                    freight: 0,\n                    paymentMethod: \"boleto\",\n                    cardData: {\n                        number: \"string\",\n                        name: \"string\",\n                        expiry: \"string\",\n                        cvv: \"string\"\n                    }\n                });\n            expect(resposta.status).to.equal(401);\n            expect(resposta.body).to.have.property('error', 'Token inválido')",
                  "err": {},
                  "uuid": "46f80e32-0703-4b6e-844b-1af8042e9e8d",
                  "parentUUID": "4b029f60-ba64-49ce-a62b-cb76f73eb82b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e581b938-b5bf-4b4c-9364-e1556a94ccbd",
                "9d5fc523-21b8-40e6-8b36-8789c43fdcb7",
                "46f80e32-0703-4b6e-844b-1af8042e9e8d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 21,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}